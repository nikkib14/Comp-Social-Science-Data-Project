my.search = 0
my.search2 = 0
my.search =
nothing
shiny::runApp()
help(Sys.sleep)
runApp()
install.packages('rsconnect')
rsconnect::setAccountInfo(name='ikkinacc', token='0ACFA63CCFA936645B75E31136729460', secret='FGOFe/Mh4MVhVjg5ZA0kxC9AN9mYG9OTVdtRknlx')
source("~/ITI/SOC_R/Soc Data Project/Deployment.R", echo=TRUE)
source("~/ITI/SOC_R/Soc Data Project/Deployment.R", echo=TRUE)
source("~/ITI/SOC_R/Soc Data Project/Deployment.R", echo=TRUE)
rsconnect::setAccountInfo(name='ikkinacc',
token='0ACFA63CCFA936645B75E31136729460',
secret='FGOFe/Mh4MVhVjg5ZA0kxC9AN9mYG9OTVdtRknlx')
library(rsconnect)
rsconnect::deployApp('C:\\Users\\niloy\\OneDrive\\Documents\\ITI\\SOC_R\\Soc Data Project\\app.R')
library(rsconnect)
rsconnect::deployApp('C:\\Users\\niloy\\OneDrive\\Documents\\ITI\\SOC_R\\Soc Data Project')
rsconnect::deployApp('C:\\Users\\niloy\\OneDrive\\Documents\\ITI\\SOC_R\\Soc Data Project')
shiny::runApp()
runApp()
shiny::runApp()
#find_reddit = function(my.search, my.search2){
my.search = "Valorant"
my.search = "CS:GO"
print(c(my.search, my.search2))
subs = head(find_subreddits(my.search))
Sys.sleep(5)
links = head(find_thread_urls(
keywords = NA,
sort_by = "top",
subreddit = subs$subreddit,
period = "today"
))
subs2 = head(find_subreddits(my.search2))
Sys.sleep(5)
links2 = head(find_thread_urls(
keywords = NA,
sort_by = "top",
subreddit = subs2$subreddit,
period = "today"
))
new = get_thread_content(links$url)
new2 = get_thread_content(links2$url)
total = merge(new$threads, new$comments, by="url")
total2 = merge(new2$threads, new2$comments, by="url")
total = subset(total, select=c("title", "subreddit", "comment"))%>%
group_by(subreddit)
total2 = subset(total2, select=c("title", "subreddit", "comment"))%>%
group_by(subreddit)
list = as.character(total)
list2 = as.character(total2)
tblee = tibble(list)
tblee2 = tibble(list2)
afinn = tblee %>%
unnest_tokens(word, list)%>%
inner_join(get_sentiments("afinn"))
afinn2 = tblee2 %>%
unnest_tokens(word, list2)%>%
inner_join(get_sentiments("afinn"))
afinn = as.data.frame(do.call(cbind, afinn))
afinn2 = as.data.frame(do.call(cbind, afinn2))
print("Here are the Reddit Communities chosen for the first selected topic:")
cat(subs$subreddit)
print("Here are the Reddit Communities chosen for the second selected topic:")
cat(subs2$subreddit)
#}
runApp()
runApp()
runApp()
subs2 = head(find_subreddits(my.search2))
my.search2 = "valorant"
my.search2 = "valorant"
print(c(my.search, my.search2))
subs = head(find_subreddits(my.search))
subs2 = head(find_subreddits(my.search2))
Sys.sleep(5)
links = head(find_thread_urls(
keywords = NA,
sort_by = "top",
subreddit = subs$subreddit,
period = "all"
))
Sys.sleep(5)
links2 = head(find_thread_urls(
keywords = NA,
sort_by = "top",
subreddit = subs2$subreddit,
period = "all"
))
new = get_thread_content(links$url)
new2 = get_thread_content(links2$url)
total = merge(new$threads, new$comments, by="url")
total2 = merge(new2$threads, new2$comments, by="url")
total = subset(total, select=c("title", "subreddit", "comment"))%>%
group_by(subreddit)
total2 = subset(total2, select=c("title", "subreddit", "comment"))%>%
group_by(subreddit)
list = as.character(total)
list2 = as.character(total2)
tblee = tibble(list)
tblee2 = tibble(list2)
afinn = tblee %>%
unnest_tokens(word, list)%>%
inner_join(get_sentiments("afinn"))
afinn2 = tblee2 %>%
unnest_tokens(word, list2)%>%
inner_join(get_sentiments("afinn"))
afinn = as.data.frame(do.call(cbind, afinn))
afinn2 = as.data.frame(do.call(cbind, afinn2))
print("Here are the Reddit Communities chosen for the first selected topic:")
cat(subs$subreddit)
print("Here are the Reddit Communities chosen for the second selected topic:")
cat(subs2$subreddit)
typeof(list2)
typeof(tblee2)
tblee2 = tibble(list2)
typeof(tblee2)
View(new2)
runApp()
runApp()
my.search = "valorant"
print(c(my.search, my.search2))
subs = head(find_subreddits(my.search))
subs2 = head(find_subreddits(my.search2))
Sys.sleep(5)
links = head(find_thread_urls(
keywords = NA,
sort_by = "top",
subreddit = subs$subreddit,
period = "all"
))
Sys.sleep(5)
links2 = head(find_thread_urls(
keywords = NA,
sort_by = "top",
subreddit = subs2$subreddit,
period = "all"
))
new = get_thread_content(links$url)
new2 = get_thread_content(links2$url)
total = merge(new$threads, new$comments, by="url")
total2 = merge(new2$threads, new2$comments, by="url")
total = subset(total, select=c("title", "subreddit", "comment"))%>%
group_by(subreddit)
total2 = subset(total2, select=c("title", "subreddit", "comment"))%>%
group_by(subreddit)
list = as.character(total)
list2 = as.character(total2)
tblee = tibble(list)
tblee2 = tibble(list2)
afinn = tblee %>%
unnest_tokens(word, list)%>%
inner_join(get_sentiments("afinn"))
afinn2 = tblee2 %>%
unnest_tokens(word, list2)%>%
inner_join(get_sentiments("afinn"))
afinn = as.data.frame(do.call(cbind, afinn))
afinn2 = as.data.frame(do.call(cbind, afinn2))
print("Here are the Reddit Communities chosen for the first selected topic:")
cat(subs$subreddit)
hist(as.numeric(afinn$value), main = my.search,
xlab = ("Sentiment Score"))
hist(as.numeric(afinn2$value), main = my.search2,
xlab = ("Sentiment Score"))
print("Here are the Reddit Communities chosen for the second selected topic:")
cat(subs2$subreddit)
my.search = "valorant"
my.search2 = "CS:GO"
print(c(my.search, my.search2))
subs = head(find_subreddits(my.search))
subs2 = head(find_subreddits(my.search2))
Sys.sleep(5)
links = head(find_thread_urls(
keywords = NA,
sort_by = "top",
subreddit = subs$subreddit,
period = "all"
))
Sys.sleep(5)
links2 = head(find_thread_urls(
keywords = NA,
sort_by = "top",
subreddit = subs2$subreddit,
period = "all"
))
new = get_thread_content(links$url)
new2 = get_thread_content(links2$url)
total = merge(new$threads, new$comments, by="url")
total2 = merge(new2$threads, new2$comments, by="url")
total = subset(total, select=c("title", "subreddit", "comment"))%>%
group_by(subreddit)
total2 = subset(total2, select=c("title", "subreddit", "comment"))%>%
group_by(subreddit)
list = as.character(total)
list2 = as.character(total2)
tblee = tibble(list)
tblee2 = tibble(list2)
afinn = tblee %>%
unnest_tokens(word, list)%>%
inner_join(get_sentiments("afinn"))
afinn2 = tblee2 %>%
unnest_tokens(word, list2)%>%
inner_join(get_sentiments("afinn"))
afinn = as.data.frame(do.call(cbind, afinn))
afinn2 = as.data.frame(do.call(cbind, afinn2))
print("Here are the Reddit Communities chosen for the first selected topic:")
cat(subs$subreddit)
hist(as.numeric(afinn$value), main = my.search,
xlab = ("Sentiment Score"))
hist(as.numeric(afinn2$value), main = my.search2,
xlab = ("Sentiment Score"))
print("Here are the Reddit Communities chosen for the second selected topic:")
cat(subs2$subreddit)
my.search = "Biden"
my.search2 = "Trump"
print(c(my.search, my.search2))
subs = head(find_subreddits(my.search))
subs2 = head(find_subreddits(my.search2))
Sys.sleep(5)
links = head(find_thread_urls(
keywords = NA,
sort_by = "top",
subreddit = subs$subreddit,
period = "all"
))
Sys.sleep(5)
links2 = head(find_thread_urls(
keywords = NA,
sort_by = "top",
subreddit = subs2$subreddit,
period = "all"
))
new = get_thread_content(links$url)
new2 = get_thread_content(links2$url)
total = merge(new$threads, new$comments, by="url")
total2 = merge(new2$threads, new2$comments, by="url")
total = subset(total, select=c("title", "subreddit", "comment"))%>%
group_by(subreddit)
total2 = subset(total2, select=c("title", "subreddit", "comment"))%>%
group_by(subreddit)
list = as.character(total)
list2 = as.character(total2)
tblee = tibble(list)
tblee2 = tibble(list2)
afinn = tblee %>%
unnest_tokens(word, list)%>%
inner_join(get_sentiments("afinn"))
afinn2 = tblee2 %>%
unnest_tokens(word, list2)%>%
inner_join(get_sentiments("afinn"))
afinn = as.data.frame(do.call(cbind, afinn))
afinn2 = as.data.frame(do.call(cbind, afinn2))
print("Here are the Reddit Communities chosen for the first selected topic:")
cat(subs$subreddit)
hist(as.numeric(afinn$value), main = my.search,
xlab = ("Sentiment Score"))
hist(as.numeric(afinn2$value), main = my.search2,
xlab = ("Sentiment Score"))
print("Here are the Reddit Communities chosen for the second selected topic:")
cat(subs2$subreddit)
install.packages("remotes")
remotes::install_github("dashstander/pushshiftr")
reticulate::repl_python()
return data['data']
y
View(r)
quit
getPushshiftData(valorant, valorant)
source_python('python_script')
getPushshiftData(valorant, valorant)
library(reticulate)
source_python('python_script')
getPushshiftData(valorant, valorant)
library(reticulate)
source_python('getPushshiftData.py')
getPushshiftData(valorant, valorant)
library(reticulate)
source_python('python_script.py')
getPushshiftData(valorant, valorant)
library(reticulate)
source_python('python_script.py')
getPushshiftData(valorant, valorant)
library(reticulate)
source_python('python_script.py')
getPushshiftData(valorant, valorant)
library(reticulate)
source_python('python_script.py')
getPushshiftData(valorant, valorant)
library(reticulate)
source_python('python_script.py')
getPushshiftData(valorant, valorant)
library(reticulate)
source_python('python_script.py')
getPushshiftData(valorant, valorant)
library(reticulate)
source_python('python_script.py')
getPushshiftData(valorant, valorant)
library(reticulate)
source_python('python_script.py')
getPushshiftData(valorant, valorant)
library(reticulate)
source_python('python_script.py')
getPushshiftData(valorant, valorant)
library(reticulate)
source_python('python_script.py')
getPushshiftData(valorant, valorant)
library(reticulate)
source_python('python_script.py')
getPushshiftData(valorant, valorant)
library(reticulate)
source_python('python_script.py')
getPushshiftData(valorant, valorant)
library(reticulate)
source_python('python_script.py')
getPushshiftData(valorant, valorant)
library(reticulate)
source_python('python_script.py')
getPushshiftData(valorant, valorant)
library(reticulate)
source_python('python_script.py')
getPushshiftData(valorant, valorant)
library(sourcetools)
library(reticulate)
source_python('python_script.py')
getPushshiftData(valorant, valorant)
library(reticulate)
source_python('C:\\Users\\niloy\\OneDrive\\Documents\\ITI\\SOC_R\\Soc Data Project\\python_script.py')
getPushshiftData(valorant, valorant)
library(rmarkdown)
py_run_file(python_script)
library(reticulate)
py_run_file('python_script.py')
library(reticulate)
py_run_file(python_script.py)
library(reticulate)
py_run_file("python_script.py")
library(reticulate)
py_run_file("python_script.py", TRUE, TRUE)
library(reticulate)
py_run_file("python_script.py", TRUE, TRUE)
library(reticulate)
py_run_file("C:\\Users\\niloy\\OneDrive\\Documents\\ITI\\SOC_R\\Soc Data Project\\python_script.py", TRUE, TRUE)
py_run_file(C:\\Users\\niloy\\OneDrive\\Documents\\ITI\\SOC_R\\Soc Data Project\\python_script.py, TRUE, TRUE)
library(reticulate)
py_run_file(C:\\Users\\niloy\\OneDrive\\Documents\\ITI\\SOC_R\\Soc Data Project\\python_script.py, TRUE, TRUE)
a
library(reticulate)
py_run_file(C:\\Users\\niloy\\OneDrive\\Documents\\ITI\\SOC_R\\Soc Data Project\\python_script.py, TRUE, TRUE)
library(reticulate)
py_run_file(python_script.py, TRUE, TRUE)
library(reticulate)
py_run_file(python_script.py, TRUE, TRUE)
source("python_script.py")
source_python("python_script.py")
library(reticulate)
my_module = import("python_script.py")
my_module$getPushshiftData(Valorant, Valorant)
my_module = import("python_script.py")
library(reticulate)
my_module = import("idk.py")
my_module$getPushshiftData(Valorant, Valorant)
my_module = import("idk.py")
install.packages("data.table")
install.packages("PythoninR")
library(reticulate)
library(data.table)
library(PythonInR)
pyConnect(pythonExePath = "C:\Users\niloy\OneDrive\Desktop\python.exe")
system.time(pyExecfile("idk.py"))
print(data)
pyExit()
reticulate::py_discover_config()
my.search = "Nationalist"
my.search2 = "Communist"
print(c(my.search, my.search2))
subs = getPushshiftData(postType = "submission",
size = 1000,
after = "1546300800",
subreddit = my.search,
nest_level = 1)
coms = getPushshiftData(postType = "comment",
size = 1000,
after = "1546300800",
subreddit = my.search,
nest_level = 1)
subs2 = getPushshiftData(postType = "submission",
size = 1000,
after = "1546300800",
subreddit = my.search2,
nest_level = 1)
com2 = getPushshiftData(postType = "comment",
size = 1000,
after = "1546300800",
subreddit = my.search2,
nest_level = 1)
library(pushshiftr)
my.search = "Nationalist"
my.search2 = "Communist"
print(c(my.search, my.search2))
subs = getPushshiftData(postType = "submission",
size = 1000,
after = "1546300800",
subreddit = my.search,
nest_level = 1)
coms = getPushshiftData(postType = "comment",
size = 1000,
after = "1546300800",
subreddit = my.search,
nest_level = 1)
subs2 = getPushshiftData(postType = "submission",
size = 1000,
after = "1546300800",
subreddit = my.search2,
nest_level = 1)
com2 = getPushshiftData(postType = "comment",
size = 1000,
after = "1546300800",
subreddit = my.search2,
nest_level = 1)
library(pushshiftr)
my.search = "Nationalist"
my.search2 = "Communist"
print(c(my.search, my.search2))
subs = getPushshiftData(postType = "submission",
size = 1000,
after = "1546300800",
subreddit = my.search,
nest_level = 1)
coms = getPushshiftData(postType = "comment",
size = 1000,
after = "1546300800",
subreddit = my.search,
nest_level = 1)
subs2 = getPushshiftData(postType = "submission",
size = 1000,
after = "1546300800",
subreddit = my.search2,
nest_level = 1)
com2 = getPushshiftData(postType = "comment",
size = 1000,
after = "1546300800",
subreddit = my.search2,
nest_level = 1)
devtools::install_github("https://github.com/nathancunn/pushshiftR")
devtools::install_github("https://github.com/nathancunn/pushshiftR")
library(pushshiftr)
my.search = "Nationalist"
my.search2 = "Communist"
print(c(my.search, my.search2))
subs = getPushshiftData(postType = "submission",
size = 1000,
after = "1546300800",
subreddit = my.search,
nest_level = 1)
coms = getPushshiftData(postType = "comment",
size = 1000,
after = "1546300800",
subreddit = my.search,
nest_level = 1)
subs2 = getPushshiftData(postType = "submission",
size = 1000,
after = "1546300800",
subreddit = my.search2,
nest_level = 1)
com2 = getPushshiftData(postType = "comment",
size = 1000,
after = "1546300800",
subreddit = my.search2,
nest_level = 1)
library(pushshiftr)
my.search = "Nationalist"
my.search2 = "Communist"
print(c(my.search, my.search2))
subs = getPushshiftData(postType = "submission",
size = 1000,
after = "1546300800",
subreddit = my.search,
nest_level = 1)
coms = getPushshiftData(postType = "comment",
size = 1000,
after = "1546300800",
subreddit = my.search,
nest_level = 1)
subs2 = getPushshiftData(postType = "submission",
size = 1000,
after = "1546300800",
subreddit = my.search2,
nest_level = 1)
com2 = getPushshiftData(postType = "comment",
size = 1000,
after = "1546300800",
subreddit = my.search2,
nest_level = 1)
library(pushshiftr)
my.search = "Nationalist"
my.search2 = "Communist"
print(c(my.search, my.search2))
subs = ps_search_submissions(search_terms = c(my.search, my.search2),
since = "2020-1-1")
coms = ps_search_comments(search_terms = c(my.search, my.search2),
since = "2020-1-1")
install.packages("devtools")
devtools::install_github("whereofonecannotspeak/pushshiftr")
install.packages("devtools")
my.search = "Nationalist"
my.search2 = "Communist"
print(c(my.search, my.search2))
subsNew = ps_search(type = c("comment", "submission", "subreddit"),
search_terms = c(my.search, my.search2),
before = "2022-12-1")
